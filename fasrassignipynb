{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Imama-Kainat/ByteWise-MLDL/blob/main/fasrassignipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7hXfqmBPZqxD",
        "outputId": "a2770cf6-ee5c-482f-d49d-1124feecea5b"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install python-docx\n",
        "import os\n",
        "import json\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from docx import Document"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YIHCn-QAaDKJ",
        "outputId": "a174b8e6-3759-4a9d-916c-c56122d1359c"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: python-docx in /usr/local/lib/python3.10/dist-packages (1.1.2)\n",
            "Requirement already satisfied: lxml>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from python-docx) (4.9.4)\n",
            "Requirement already satisfied: typing-extensions>=4.9.0 in /usr/local/lib/python3.10/dist-packages (from python-docx) (4.12.2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Define the path to folder containing .docx files\n",
        "folder_path = '/content/drive/MyDrive/datu'\n",
        "\n",
        "# Function to read a .docx file\n",
        "def read_docx(file_path):\n",
        "    doc = Document(file_path)\n",
        "    full_text = []\n",
        "    for para in doc.paragraphs:\n",
        "        full_text.append(para.text)\n",
        "    return '\\n'.join(full_text)\n",
        "\n",
        "# Initialize an empty DataFrame to store all the data\n",
        "all_data = pd.DataFrame()\n",
        "\n",
        "# Iterate through all files in the folder\n",
        "for file_name in os.listdir(folder_path):\n",
        "    if file_name.endswith('.docx'):  # Process only .docx files\n",
        "        file_path = os.path.join(folder_path, file_name)\n",
        "        try:\n",
        "            # Extract text from the .docx file\n",
        "            docx_text = read_docx(file_path)\n",
        "\n",
        "            # Parse the JSON data from the extracted text\n",
        "            json_data = json.loads(docx_text)\n",
        "\n",
        "            # Convert JSON data to a DataFrame\n",
        "            df = pd.json_normalize(json_data)\n",
        "\n",
        "            # Concatenate the new DataFrame with the existing data\n",
        "            all_data = pd.concat([all_data, df], ignore_index=True)\n",
        "\n",
        "        except json.JSONDecodeError:\n",
        "            print(f\"Error decoding JSON in file: {file_name}. Please ensure the data is properly formatted.\")\n",
        "        except Exception as e:\n",
        "            print(f\"An error occurred while processing file: {file_name}. Error: {e}\")\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "RJ50rGBgTv7-"
      },
      "execution_count": 69,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Display the concatenated DataFrame\n",
        "print(all_data)\n",
        "\n",
        "# Show DataFrame properties\n",
        "print(\"\\nDataFrame Info:\")\n",
        "print(all_data.info())\n",
        "\n",
        "print(\"\\nDataFrame Summary:\")\n",
        "print(all_data.describe(include='all'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "77DA-pOJYUCz",
        "outputId": "2a587299-0603-4108-c0e7-c838c27e997f"
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "            type  status departure.iataCode departure.icaoCode  \\\n",
            "0      departure  active                lhe               opla   \n",
            "1      departure  active                lhe               opla   \n",
            "2      departure  active                lhe               opla   \n",
            "3      departure  active                lhe               opla   \n",
            "4      departure  active                lhe               opla   \n",
            "...          ...     ...                ...                ...   \n",
            "81387  departure  active                isb               opis   \n",
            "81388  departure  active                isb               opis   \n",
            "81389  departure  active                isb               opis   \n",
            "81390  departure  active                isb               opis   \n",
            "81391  departure  active                isb               opis   \n",
            "\n",
            "      departure.terminal  departure.delay  departure.scheduledTime  \\\n",
            "0                      m             20.0  2023-12-16t06:35:00.000   \n",
            "1                      m             20.0  2023-12-16t06:35:00.000   \n",
            "2                      m              NaN  2023-12-16t08:35:00.000   \n",
            "3                      m              NaN  2023-12-16t08:35:00.000   \n",
            "4                      m              NaN  2023-12-16t08:35:00.000   \n",
            "...                  ...              ...                      ...   \n",
            "81387                NaN             14.0  2024-06-01t04:15:00.000   \n",
            "81388                NaN              3.0  2024-06-01t04:30:00.000   \n",
            "81389                NaN              3.0  2024-06-01t04:30:00.000   \n",
            "81390                NaN              NaN  2024-05-31t10:00:00.000   \n",
            "81391                NaN              NaN  2024-05-31t13:25:00.000   \n",
            "\n",
            "       departure.estimatedTime     departure.actualTime  \\\n",
            "0      2023-12-16t06:45:00.000  2023-12-16t06:55:00.000   \n",
            "1      2023-12-16t06:45:00.000  2023-12-16t06:55:00.000   \n",
            "2      2023-12-16t08:35:00.000                      NaN   \n",
            "3      2023-12-16t08:35:00.000                      NaN   \n",
            "4      2023-12-16t08:35:00.000                      NaN   \n",
            "...                        ...                      ...   \n",
            "81387  2024-06-01t04:15:00.000  2024-06-01t04:29:00.000   \n",
            "81388  2024-06-01t04:30:00.000  2024-06-01t04:32:00.000   \n",
            "81389  2024-06-01t04:30:00.000  2024-06-01t04:32:00.000   \n",
            "81390  2024-05-31t10:00:00.000                      NaN   \n",
            "81391  2024-05-31t13:25:00.000                      NaN   \n",
            "\n",
            "      departure.estimatedRunway  ... codeshared.flight.iataNumber  \\\n",
            "0       2023-12-16t06:55:00.000  ...                        tk715   \n",
            "1       2023-12-16t06:55:00.000  ...                          NaN   \n",
            "2                           NaN  ...                        qr629   \n",
            "3                           NaN  ...                        qr629   \n",
            "4                           NaN  ...                        qr629   \n",
            "...                         ...  ...                          ...   \n",
            "81387   2024-06-01t04:29:00.000  ...                          NaN   \n",
            "81388   2024-06-01t04:32:00.000  ...                        ey232   \n",
            "81389   2024-06-01t04:32:00.000  ...                          NaN   \n",
            "81390                       NaN  ...                          NaN   \n",
            "81391                       NaN  ...                          NaN   \n",
            "\n",
            "      codeshared.flight.icaoNumber arrival.baggage arrival.terminal  \\\n",
            "0                           thy715             NaN              NaN   \n",
            "1                              NaN             NaN              NaN   \n",
            "2                           qtr629               8              NaN   \n",
            "3                           qtr629               8              NaN   \n",
            "4                           qtr629               8              NaN   \n",
            "...                            ...             ...              ...   \n",
            "81387                          NaN             NaN               t3   \n",
            "81388                       etd232               1               ta   \n",
            "81389                          NaN               1               ta   \n",
            "81390                          NaN             NaN              NaN   \n",
            "81391                          NaN             NaN              NaN   \n",
            "\n",
            "      arrival.delay arrival.actualTime arrival.estimatedRunway  \\\n",
            "0               NaN                NaN                     NaN   \n",
            "1               NaN                NaN                     NaN   \n",
            "2               NaN                NaN                     NaN   \n",
            "3               NaN                NaN                     NaN   \n",
            "4               NaN                NaN                     NaN   \n",
            "...             ...                ...                     ...   \n",
            "81387           1.0                NaN                     NaN   \n",
            "81388           NaN                NaN                     NaN   \n",
            "81389           NaN                NaN                     NaN   \n",
            "81390           NaN                NaN                     NaN   \n",
            "81391           NaN                NaN                     NaN   \n",
            "\n",
            "      arrival.actualRunway departure.gate arrival.gate  \n",
            "0                      NaN            NaN          NaN  \n",
            "1                      NaN            NaN          NaN  \n",
            "2                      NaN            NaN          NaN  \n",
            "3                      NaN            NaN          NaN  \n",
            "4                      NaN            NaN          NaN  \n",
            "...                    ...            ...          ...  \n",
            "81387                  NaN            NaN          NaN  \n",
            "81388                  NaN             b1          d49  \n",
            "81389                  NaN             b1          d49  \n",
            "81390                  NaN            NaN          NaN  \n",
            "81391                  NaN            NaN          NaN  \n",
            "\n",
            "[81392 rows x 35 columns]\n",
            "\n",
            "DataFrame Info:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 81392 entries, 0 to 81391\n",
            "Data columns (total 35 columns):\n",
            " #   Column                        Non-Null Count  Dtype  \n",
            "---  ------                        --------------  -----  \n",
            " 0   type                          81392 non-null  object \n",
            " 1   status                        81392 non-null  object \n",
            " 2   departure.iataCode            81392 non-null  object \n",
            " 3   departure.icaoCode            81392 non-null  object \n",
            " 4   departure.terminal            46561 non-null  object \n",
            " 5   departure.delay               52525 non-null  float64\n",
            " 6   departure.scheduledTime       81392 non-null  object \n",
            " 7   departure.estimatedTime       70368 non-null  object \n",
            " 8   departure.actualTime          48262 non-null  object \n",
            " 9   departure.estimatedRunway     48262 non-null  object \n",
            " 10  departure.actualRunway        48262 non-null  object \n",
            " 11  arrival.iataCode              81392 non-null  object \n",
            " 12  arrival.icaoCode              81392 non-null  object \n",
            " 13  arrival.scheduledTime         81392 non-null  object \n",
            " 14  arrival.estimatedTime         46924 non-null  object \n",
            " 15  airline.name                  81392 non-null  object \n",
            " 16  airline.iataCode              81392 non-null  object \n",
            " 17  airline.icaoCode              81392 non-null  object \n",
            " 18  flight.number                 81392 non-null  object \n",
            " 19  flight.iataNumber             81392 non-null  object \n",
            " 20  flight.icaoNumber             81392 non-null  object \n",
            " 21  codeshared.airline.name       25080 non-null  object \n",
            " 22  codeshared.airline.iataCode   25080 non-null  object \n",
            " 23  codeshared.airline.icaoCode   25080 non-null  object \n",
            " 24  codeshared.flight.number      25080 non-null  object \n",
            " 25  codeshared.flight.iataNumber  25080 non-null  object \n",
            " 26  codeshared.flight.icaoNumber  25080 non-null  object \n",
            " 27  arrival.baggage               28536 non-null  object \n",
            " 28  arrival.terminal              32796 non-null  object \n",
            " 29  arrival.delay                 8898 non-null   float64\n",
            " 30  arrival.actualTime            386 non-null    object \n",
            " 31  arrival.estimatedRunway       386 non-null    object \n",
            " 32  arrival.actualRunway          386 non-null    object \n",
            " 33  departure.gate                5608 non-null   object \n",
            " 34  arrival.gate                  5713 non-null   object \n",
            "dtypes: float64(2), object(33)\n",
            "memory usage: 21.7+ MB\n",
            "None\n",
            "\n",
            "DataFrame Summary:\n",
            "             type  status departure.iataCode departure.icaoCode  \\\n",
            "count       81392   81392              81392              81392   \n",
            "unique          1       3                  3                  3   \n",
            "top     departure  active                khi               opkc   \n",
            "freq        81392   75897              31315              31315   \n",
            "mean          NaN     NaN                NaN                NaN   \n",
            "std           NaN     NaN                NaN                NaN   \n",
            "min           NaN     NaN                NaN                NaN   \n",
            "25%           NaN     NaN                NaN                NaN   \n",
            "50%           NaN     NaN                NaN                NaN   \n",
            "75%           NaN     NaN                NaN                NaN   \n",
            "max           NaN     NaN                NaN                NaN   \n",
            "\n",
            "       departure.terminal  departure.delay  departure.scheduledTime  \\\n",
            "count               46561     52525.000000                    81392   \n",
            "unique                  6              NaN                    39934   \n",
            "top                     m              NaN  2024-01-31t08:35:00.000   \n",
            "freq                41086              NaN                       15   \n",
            "mean                  NaN        34.134127                      NaN   \n",
            "std                   NaN        74.065907                      NaN   \n",
            "min                   NaN         1.000000                      NaN   \n",
            "25%                   NaN         9.000000                      NaN   \n",
            "50%                   NaN        16.000000                      NaN   \n",
            "75%                   NaN        29.000000                      NaN   \n",
            "max                   NaN      1950.000000                      NaN   \n",
            "\n",
            "        departure.estimatedTime     departure.actualTime  \\\n",
            "count                     70368                    48262   \n",
            "unique                    36946                    29787   \n",
            "top     2024-03-19t08:35:00.000  2023-11-07t09:19:00.000   \n",
            "freq                         15                       14   \n",
            "mean                        NaN                      NaN   \n",
            "std                         NaN                      NaN   \n",
            "min                         NaN                      NaN   \n",
            "25%                         NaN                      NaN   \n",
            "50%                         NaN                      NaN   \n",
            "75%                         NaN                      NaN   \n",
            "max                         NaN                      NaN   \n",
            "\n",
            "       departure.estimatedRunway  ... codeshared.flight.iataNumber  \\\n",
            "count                      48262  ...                        25080   \n",
            "unique                     29787  ...                           76   \n",
            "top      2023-11-07t09:19:00.000  ...                        qr629   \n",
            "freq                          14  ...                         2509   \n",
            "mean                         NaN  ...                          NaN   \n",
            "std                          NaN  ...                          NaN   \n",
            "min                          NaN  ...                          NaN   \n",
            "25%                          NaN  ...                          NaN   \n",
            "50%                          NaN  ...                          NaN   \n",
            "75%                          NaN  ...                          NaN   \n",
            "max                          NaN  ...                          NaN   \n",
            "\n",
            "       codeshared.flight.icaoNumber arrival.baggage arrival.terminal  \\\n",
            "count                         25080           28536            32796   \n",
            "unique                           76              66               14   \n",
            "top                          qtr629               1                1   \n",
            "freq                           2509            8518             8603   \n",
            "mean                            NaN             NaN              NaN   \n",
            "std                             NaN             NaN              NaN   \n",
            "min                             NaN             NaN              NaN   \n",
            "25%                             NaN             NaN              NaN   \n",
            "50%                             NaN             NaN              NaN   \n",
            "75%                             NaN             NaN              NaN   \n",
            "max                             NaN             NaN              NaN   \n",
            "\n",
            "       arrival.delay       arrival.actualTime  arrival.estimatedRunway  \\\n",
            "count    8898.000000                      386                      386   \n",
            "unique           NaN                      384                      384   \n",
            "top              NaN  2024-01-27t00:04:00.000  2024-01-27t00:04:00.000   \n",
            "freq             NaN                        2                        2   \n",
            "mean       10.940998                      NaN                      NaN   \n",
            "std        10.131040                      NaN                      NaN   \n",
            "min         1.000000                      NaN                      NaN   \n",
            "25%         4.000000                      NaN                      NaN   \n",
            "50%         8.000000                      NaN                      NaN   \n",
            "75%        15.000000                      NaN                      NaN   \n",
            "max       175.000000                      NaN                      NaN   \n",
            "\n",
            "           arrival.actualRunway departure.gate arrival.gate  \n",
            "count                       386           5608         5713  \n",
            "unique                      384             23          183  \n",
            "top     2024-01-27t00:04:00.000             24           70  \n",
            "freq                          2            924          576  \n",
            "mean                        NaN            NaN          NaN  \n",
            "std                         NaN            NaN          NaN  \n",
            "min                         NaN            NaN          NaN  \n",
            "25%                         NaN            NaN          NaN  \n",
            "50%                         NaN            NaN          NaN  \n",
            "75%                         NaN            NaN          NaN  \n",
            "max                         NaN            NaN          NaN  \n",
            "\n",
            "[11 rows x 35 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "all_data.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "collapsed": true,
        "id": "UdK9f-m4GYhO",
        "outputId": "ea89f02c-8fc7-42e2-bc81-0cd3dc499371"
      },
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "type                             object\n",
              "status                           object\n",
              "departure.iataCode               object\n",
              "departure.icaoCode               object\n",
              "departure.terminal               object\n",
              "departure.delay                 float64\n",
              "departure.scheduledTime          object\n",
              "departure.estimatedTime          object\n",
              "departure.actualTime             object\n",
              "departure.estimatedRunway        object\n",
              "departure.actualRunway           object\n",
              "arrival.iataCode                 object\n",
              "arrival.icaoCode                 object\n",
              "arrival.scheduledTime            object\n",
              "arrival.estimatedTime            object\n",
              "airline.name                     object\n",
              "airline.iataCode                 object\n",
              "airline.icaoCode                 object\n",
              "flight.number                    object\n",
              "flight.iataNumber                object\n",
              "flight.icaoNumber                object\n",
              "codeshared.airline.name          object\n",
              "codeshared.airline.iataCode      object\n",
              "codeshared.airline.icaoCode      object\n",
              "codeshared.flight.number         object\n",
              "codeshared.flight.iataNumber     object\n",
              "codeshared.flight.icaoNumber     object\n",
              "arrival.baggage                  object\n",
              "arrival.terminal                 object\n",
              "arrival.delay                   float64\n",
              "arrival.actualTime               object\n",
              "arrival.estimatedRunway          object\n",
              "arrival.actualRunway             object\n",
              "departure.gate                   object\n",
              "arrival.gate                     object\n",
              "dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>type</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>status</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>departure.iataCode</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>departure.icaoCode</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>departure.terminal</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>departure.delay</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>departure.scheduledTime</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>departure.estimatedTime</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>departure.actualTime</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>departure.estimatedRunway</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>departure.actualRunway</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>arrival.iataCode</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>arrival.icaoCode</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>arrival.scheduledTime</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>arrival.estimatedTime</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>airline.name</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>airline.iataCode</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>airline.icaoCode</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>flight.number</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>flight.iataNumber</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>flight.icaoNumber</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>codeshared.airline.name</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>codeshared.airline.iataCode</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>codeshared.airline.icaoCode</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>codeshared.flight.number</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>codeshared.flight.iataNumber</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>codeshared.flight.icaoNumber</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>arrival.baggage</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>arrival.terminal</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>arrival.delay</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>arrival.actualTime</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>arrival.estimatedRunway</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>arrival.actualRunway</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>departure.gate</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>arrival.gate</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 71
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "print(all_data.isnull().sum())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Xh0QCsBVFVX3",
        "outputId": "0a474214-ca7c-4aa6-9c9b-6d24c9a01621"
      },
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "type                                0\n",
            "status                              0\n",
            "departure.iataCode                  0\n",
            "departure.icaoCode                  0\n",
            "departure.terminal              34831\n",
            "departure.delay                 28867\n",
            "departure.scheduledTime             0\n",
            "departure.estimatedTime         11024\n",
            "departure.actualTime            33130\n",
            "departure.estimatedRunway       33130\n",
            "departure.actualRunway          33130\n",
            "arrival.iataCode                    0\n",
            "arrival.icaoCode                    0\n",
            "arrival.scheduledTime               0\n",
            "arrival.estimatedTime           34468\n",
            "airline.name                        0\n",
            "airline.iataCode                    0\n",
            "airline.icaoCode                    0\n",
            "flight.number                       0\n",
            "flight.iataNumber                   0\n",
            "flight.icaoNumber                   0\n",
            "codeshared.airline.name         56312\n",
            "codeshared.airline.iataCode     56312\n",
            "codeshared.airline.icaoCode     56312\n",
            "codeshared.flight.number        56312\n",
            "codeshared.flight.iataNumber    56312\n",
            "codeshared.flight.icaoNumber    56312\n",
            "arrival.baggage                 52856\n",
            "arrival.terminal                48596\n",
            "arrival.delay                   72494\n",
            "arrival.actualTime              81006\n",
            "arrival.estimatedRunway         81006\n",
            "arrival.actualRunway            81006\n",
            "departure.gate                  75784\n",
            "arrival.gate                    75679\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Remove rows where 'departure.delay' is null or 'status' is not 'active'\n",
        "all_data = all_data.dropna(subset=['departure.delay'])\n",
        "all_data = all_data[all_data['status'] == 'active']\n",
        "\n",
        "# Get columns with more than 40000 null values\n",
        "cols_to_drop = all_data.columns[all_data.isnull().sum() > 40000]\n",
        "\n",
        "# Drop those columns\n",
        "all_data = all_data.drop(columns=cols_to_drop)\n",
        "\n",
        "# Reset the index\n",
        "all_data = all_data.reset_index(drop=True)\n",
        "\n",
        "# Display the modified DataFrame\n",
        "print(all_data)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dplFBX7XGk4Z",
        "outputId": "5e49f85b-aec3-433b-99bc-d470ed0d64d3"
      },
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "            type  status departure.iataCode departure.icaoCode  \\\n",
            "0      departure  active                lhe               opla   \n",
            "1      departure  active                lhe               opla   \n",
            "2      departure  active                lhe               opla   \n",
            "3      departure  active                lhe               opla   \n",
            "4      departure  active                lhe               opla   \n",
            "...          ...     ...                ...                ...   \n",
            "52349  departure  active                isb               opis   \n",
            "52350  departure  active                isb               opis   \n",
            "52351  departure  active                isb               opis   \n",
            "52352  departure  active                isb               opis   \n",
            "52353  departure  active                isb               opis   \n",
            "\n",
            "      departure.terminal  departure.delay  departure.scheduledTime  \\\n",
            "0                      m             20.0  2023-12-16t06:35:00.000   \n",
            "1                      m             20.0  2023-12-16t06:35:00.000   \n",
            "2                      m             44.0  2023-12-16t09:00:00.000   \n",
            "3                      m            360.0  2023-12-16t11:00:00.000   \n",
            "4                      m             60.0  2023-12-16t11:25:00.000   \n",
            "...                  ...              ...                      ...   \n",
            "52349                NaN             12.0  2024-06-01t03:35:00.000   \n",
            "52350                NaN             12.0  2024-06-01t03:35:00.000   \n",
            "52351                NaN             14.0  2024-06-01t04:15:00.000   \n",
            "52352                NaN              3.0  2024-06-01t04:30:00.000   \n",
            "52353                NaN              3.0  2024-06-01t04:30:00.000   \n",
            "\n",
            "       departure.estimatedTime     departure.actualTime  \\\n",
            "0      2023-12-16t06:45:00.000  2023-12-16t06:55:00.000   \n",
            "1      2023-12-16t06:45:00.000  2023-12-16t06:55:00.000   \n",
            "2      2023-12-16t09:30:00.000  2023-12-16t09:43:00.000   \n",
            "3      2023-12-16t17:00:00.000                      NaN   \n",
            "4      2023-12-16t12:25:00.000                      NaN   \n",
            "...                        ...                      ...   \n",
            "52349  2024-06-01t03:35:00.000  2024-06-01t03:47:00.000   \n",
            "52350  2024-06-01t03:35:00.000  2024-06-01t03:47:00.000   \n",
            "52351  2024-06-01t04:15:00.000  2024-06-01t04:29:00.000   \n",
            "52352  2024-06-01t04:30:00.000  2024-06-01t04:32:00.000   \n",
            "52353  2024-06-01t04:30:00.000  2024-06-01t04:32:00.000   \n",
            "\n",
            "      departure.estimatedRunway  ... flight.iataNumber flight.icaoNumber  \\\n",
            "0       2023-12-16t06:55:00.000  ...            pk5715           pia5715   \n",
            "1       2023-12-16t06:55:00.000  ...             tk715            thy715   \n",
            "2       2023-12-16t09:43:00.000  ...             pa401            abq401   \n",
            "3                           NaN  ...             pk303            pia303   \n",
            "4                           NaN  ...             er723            sep723   \n",
            "...                         ...  ...               ...               ...   \n",
            "52349   2024-06-01t03:47:00.000  ...            ib7917           ibe7917   \n",
            "52350   2024-06-01t03:47:00.000  ...             qr633            qtr633   \n",
            "52351   2024-06-01t04:29:00.000  ...             xy316            kne316   \n",
            "52352   2024-06-01t04:32:00.000  ...            kl3930           klm3930   \n",
            "52353   2024-06-01t04:32:00.000  ...             ey232            etd232   \n",
            "\n",
            "      codeshared.airline.name codeshared.airline.iataCode  \\\n",
            "0            turkish airlines                          tk   \n",
            "1                         NaN                         NaN   \n",
            "2                         NaN                         NaN   \n",
            "3                         NaN                         NaN   \n",
            "4                         NaN                         NaN   \n",
            "...                       ...                         ...   \n",
            "52349           qatar airways                          qr   \n",
            "52350                     NaN                         NaN   \n",
            "52351                     NaN                         NaN   \n",
            "52352          etihad airways                          ey   \n",
            "52353                     NaN                         NaN   \n",
            "\n",
            "      codeshared.airline.icaoCode codeshared.flight.number  \\\n",
            "0                             thy                      715   \n",
            "1                             NaN                      NaN   \n",
            "2                             NaN                      NaN   \n",
            "3                             NaN                      NaN   \n",
            "4                             NaN                      NaN   \n",
            "...                           ...                      ...   \n",
            "52349                         qtr                      633   \n",
            "52350                         NaN                      NaN   \n",
            "52351                         NaN                      NaN   \n",
            "52352                         etd                      232   \n",
            "52353                         NaN                      NaN   \n",
            "\n",
            "      codeshared.flight.iataNumber codeshared.flight.icaoNumber  \\\n",
            "0                            tk715                       thy715   \n",
            "1                              NaN                          NaN   \n",
            "2                              NaN                          NaN   \n",
            "3                              NaN                          NaN   \n",
            "4                              NaN                          NaN   \n",
            "...                            ...                          ...   \n",
            "52349                        qr633                       qtr633   \n",
            "52350                          NaN                          NaN   \n",
            "52351                          NaN                          NaN   \n",
            "52352                        ey232                       etd232   \n",
            "52353                          NaN                          NaN   \n",
            "\n",
            "      arrival.baggage arrival.terminal  \n",
            "0                 NaN              NaN  \n",
            "1                 NaN              NaN  \n",
            "2                 NaN                m  \n",
            "3                 NaN                m  \n",
            "4                  01                1  \n",
            "...               ...              ...  \n",
            "52349               2              NaN  \n",
            "52350               2              NaN  \n",
            "52351             NaN               t3  \n",
            "52352               1               ta  \n",
            "52353               1               ta  \n",
            "\n",
            "[52354 rows x 29 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "all_data.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9EHYiE1kIh3G",
        "outputId": "f9af1525-47ee-42e0-911f-8d1c67c58b66",
        "collapsed": true
      },
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 52354 entries, 0 to 52353\n",
            "Data columns (total 29 columns):\n",
            " #   Column                        Non-Null Count  Dtype  \n",
            "---  ------                        --------------  -----  \n",
            " 0   type                          52354 non-null  object \n",
            " 1   status                        52354 non-null  object \n",
            " 2   departure.iataCode            52354 non-null  object \n",
            " 3   departure.icaoCode            52354 non-null  object \n",
            " 4   departure.terminal            32293 non-null  object \n",
            " 5   departure.delay               52354 non-null  float64\n",
            " 6   departure.scheduledTime       52354 non-null  object \n",
            " 7   departure.estimatedTime       50878 non-null  object \n",
            " 8   departure.actualTime          41485 non-null  object \n",
            " 9   departure.estimatedRunway     41485 non-null  object \n",
            " 10  departure.actualRunway        41485 non-null  object \n",
            " 11  arrival.iataCode              52354 non-null  object \n",
            " 12  arrival.icaoCode              52354 non-null  object \n",
            " 13  arrival.scheduledTime         52354 non-null  object \n",
            " 14  arrival.estimatedTime         40439 non-null  object \n",
            " 15  airline.name                  52354 non-null  object \n",
            " 16  airline.iataCode              52354 non-null  object \n",
            " 17  airline.icaoCode              52354 non-null  object \n",
            " 18  flight.number                 52354 non-null  object \n",
            " 19  flight.iataNumber             52354 non-null  object \n",
            " 20  flight.icaoNumber             52354 non-null  object \n",
            " 21  codeshared.airline.name       17515 non-null  object \n",
            " 22  codeshared.airline.iataCode   17515 non-null  object \n",
            " 23  codeshared.airline.icaoCode   17515 non-null  object \n",
            " 24  codeshared.flight.number      17515 non-null  object \n",
            " 25  codeshared.flight.iataNumber  17515 non-null  object \n",
            " 26  codeshared.flight.icaoNumber  17515 non-null  object \n",
            " 27  arrival.baggage               20238 non-null  object \n",
            " 28  arrival.terminal              22549 non-null  object \n",
            "dtypes: float64(1), object(28)\n",
            "memory usage: 11.6+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Bin the 'departure.delay' column into 8 bins\n",
        "all_data['departure_delay_bin'] = pd.cut(all_data['departure.delay'], bins=8)\n",
        "\n",
        "# Display the modified DataFrame\n",
        "print(all_data)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4IWXh-XyJS8n",
        "outputId": "6d3f1ef2-9c70-4d3f-dc62-d068c4822eeb",
        "collapsed": true
      },
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "            type  status departure.iataCode departure.icaoCode  \\\n",
            "0      departure  active                lhe               opla   \n",
            "1      departure  active                lhe               opla   \n",
            "2      departure  active                lhe               opla   \n",
            "3      departure  active                lhe               opla   \n",
            "4      departure  active                lhe               opla   \n",
            "...          ...     ...                ...                ...   \n",
            "52349  departure  active                isb               opis   \n",
            "52350  departure  active                isb               opis   \n",
            "52351  departure  active                isb               opis   \n",
            "52352  departure  active                isb               opis   \n",
            "52353  departure  active                isb               opis   \n",
            "\n",
            "      departure.terminal  departure.delay  departure.scheduledTime  \\\n",
            "0                      m             20.0  2023-12-16t06:35:00.000   \n",
            "1                      m             20.0  2023-12-16t06:35:00.000   \n",
            "2                      m             44.0  2023-12-16t09:00:00.000   \n",
            "3                      m            360.0  2023-12-16t11:00:00.000   \n",
            "4                      m             60.0  2023-12-16t11:25:00.000   \n",
            "...                  ...              ...                      ...   \n",
            "52349                NaN             12.0  2024-06-01t03:35:00.000   \n",
            "52350                NaN             12.0  2024-06-01t03:35:00.000   \n",
            "52351                NaN             14.0  2024-06-01t04:15:00.000   \n",
            "52352                NaN              3.0  2024-06-01t04:30:00.000   \n",
            "52353                NaN              3.0  2024-06-01t04:30:00.000   \n",
            "\n",
            "       departure.estimatedTime     departure.actualTime  \\\n",
            "0      2023-12-16t06:45:00.000  2023-12-16t06:55:00.000   \n",
            "1      2023-12-16t06:45:00.000  2023-12-16t06:55:00.000   \n",
            "2      2023-12-16t09:30:00.000  2023-12-16t09:43:00.000   \n",
            "3      2023-12-16t17:00:00.000                      NaN   \n",
            "4      2023-12-16t12:25:00.000                      NaN   \n",
            "...                        ...                      ...   \n",
            "52349  2024-06-01t03:35:00.000  2024-06-01t03:47:00.000   \n",
            "52350  2024-06-01t03:35:00.000  2024-06-01t03:47:00.000   \n",
            "52351  2024-06-01t04:15:00.000  2024-06-01t04:29:00.000   \n",
            "52352  2024-06-01t04:30:00.000  2024-06-01t04:32:00.000   \n",
            "52353  2024-06-01t04:30:00.000  2024-06-01t04:32:00.000   \n",
            "\n",
            "      departure.estimatedRunway  ... flight.icaoNumber  \\\n",
            "0       2023-12-16t06:55:00.000  ...           pia5715   \n",
            "1       2023-12-16t06:55:00.000  ...            thy715   \n",
            "2       2023-12-16t09:43:00.000  ...            abq401   \n",
            "3                           NaN  ...            pia303   \n",
            "4                           NaN  ...            sep723   \n",
            "...                         ...  ...               ...   \n",
            "52349   2024-06-01t03:47:00.000  ...           ibe7917   \n",
            "52350   2024-06-01t03:47:00.000  ...            qtr633   \n",
            "52351   2024-06-01t04:29:00.000  ...            kne316   \n",
            "52352   2024-06-01t04:32:00.000  ...           klm3930   \n",
            "52353   2024-06-01t04:32:00.000  ...            etd232   \n",
            "\n",
            "      codeshared.airline.name codeshared.airline.iataCode  \\\n",
            "0            turkish airlines                          tk   \n",
            "1                         NaN                         NaN   \n",
            "2                         NaN                         NaN   \n",
            "3                         NaN                         NaN   \n",
            "4                         NaN                         NaN   \n",
            "...                       ...                         ...   \n",
            "52349           qatar airways                          qr   \n",
            "52350                     NaN                         NaN   \n",
            "52351                     NaN                         NaN   \n",
            "52352          etihad airways                          ey   \n",
            "52353                     NaN                         NaN   \n",
            "\n",
            "      codeshared.airline.icaoCode codeshared.flight.number  \\\n",
            "0                             thy                      715   \n",
            "1                             NaN                      NaN   \n",
            "2                             NaN                      NaN   \n",
            "3                             NaN                      NaN   \n",
            "4                             NaN                      NaN   \n",
            "...                           ...                      ...   \n",
            "52349                         qtr                      633   \n",
            "52350                         NaN                      NaN   \n",
            "52351                         NaN                      NaN   \n",
            "52352                         etd                      232   \n",
            "52353                         NaN                      NaN   \n",
            "\n",
            "      codeshared.flight.iataNumber codeshared.flight.icaoNumber  \\\n",
            "0                            tk715                       thy715   \n",
            "1                              NaN                          NaN   \n",
            "2                              NaN                          NaN   \n",
            "3                              NaN                          NaN   \n",
            "4                              NaN                          NaN   \n",
            "...                            ...                          ...   \n",
            "52349                        qr633                       qtr633   \n",
            "52350                          NaN                          NaN   \n",
            "52351                          NaN                          NaN   \n",
            "52352                        ey232                       etd232   \n",
            "52353                          NaN                          NaN   \n",
            "\n",
            "      arrival.baggage arrival.terminal departure_delay_bin  \n",
            "0                 NaN              NaN   (-0.949, 244.625]  \n",
            "1                 NaN              NaN   (-0.949, 244.625]  \n",
            "2                 NaN                m   (-0.949, 244.625]  \n",
            "3                 NaN                m   (244.625, 488.25]  \n",
            "4                  01                1   (-0.949, 244.625]  \n",
            "...               ...              ...                 ...  \n",
            "52349               2              NaN   (-0.949, 244.625]  \n",
            "52350               2              NaN   (-0.949, 244.625]  \n",
            "52351             NaN               t3   (-0.949, 244.625]  \n",
            "52352               1               ta   (-0.949, 244.625]  \n",
            "52353               1               ta   (-0.949, 244.625]  \n",
            "\n",
            "[52354 rows x 30 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Convert 'departure.scheduledTime' to datetime objects\n",
        "all_data['departure.scheduledTime'] = pd.to_datetime(all_data['departure.scheduledTime'])\n",
        "\n",
        "# Extract year, month, day, and time\n",
        "all_data['departure_year'] = all_data['departure.scheduledTime'].dt.year\n",
        "all_data['departure_month'] = all_data['departure.scheduledTime'].dt.month\n",
        "all_data['departure_day'] = all_data['departure.scheduledTime'].dt.day\n",
        "all_data['scheduled_d_Time'] = all_data['departure.scheduledTime'].dt.strftime('%H%M%S')  # Time in HHMMSS format\n",
        "\n",
        "# Display the modified DataFrame\n",
        "print(all_data[['departure.scheduledTime', 'departure_year', 'departure_month', 'departure_day', 'scheduled_d_Time']])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Mq5rhX5HJhcU",
        "outputId": "e406f54a-8457-44b7-db2a-9b7986fa8361",
        "collapsed": true
      },
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      departure.scheduledTime  departure_year  departure_month  departure_day  \\\n",
            "0         2023-12-16 06:35:00            2023               12             16   \n",
            "1         2023-12-16 06:35:00            2023               12             16   \n",
            "2         2023-12-16 09:00:00            2023               12             16   \n",
            "3         2023-12-16 11:00:00            2023               12             16   \n",
            "4         2023-12-16 11:25:00            2023               12             16   \n",
            "...                       ...             ...              ...            ...   \n",
            "52349     2024-06-01 03:35:00            2024                6              1   \n",
            "52350     2024-06-01 03:35:00            2024                6              1   \n",
            "52351     2024-06-01 04:15:00            2024                6              1   \n",
            "52352     2024-06-01 04:30:00            2024                6              1   \n",
            "52353     2024-06-01 04:30:00            2024                6              1   \n",
            "\n",
            "      scheduled_d_Time  \n",
            "0               063500  \n",
            "1               063500  \n",
            "2               090000  \n",
            "3               110000  \n",
            "4               112500  \n",
            "...                ...  \n",
            "52349           033500  \n",
            "52350           033500  \n",
            "52351           041500  \n",
            "52352           043000  \n",
            "52353           043000  \n",
            "\n",
            "[52354 rows x 5 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Extract time from 'departure.estimatedTime'\n",
        "all_data['departure.estimatedTime'] = pd.to_datetime(all_data['departure.estimatedTime']).dt.strftime('%H%M%S')\n",
        "\n",
        "# Extract time from 'arrival.estimatedTime'\n",
        "all_data['arrival.scheduledTime'] = pd.to_datetime(all_data['arrival.scheduledTime']).dt.strftime('%H%M%S')\n",
        "\n",
        "# Extract time from 'departure.actualTime'\n",
        "all_data['departure.actualTime'] = pd.to_datetime(all_data['departure.actualTime']).dt.strftime('%H%M%S')\n",
        "\n",
        "# Extract time from 'arrival.actualTime'\n"
      ],
      "metadata": {
        "id": "tC0A-W0XJg9u",
        "collapsed": true
      },
      "execution_count": 77,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "all_data.info()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "886KwY8HRYgx",
        "outputId": "0b95fabf-a904-4d9a-948b-0de0bc88aa9e",
        "collapsed": true
      },
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 52354 entries, 0 to 52353\n",
            "Data columns (total 34 columns):\n",
            " #   Column                        Non-Null Count  Dtype         \n",
            "---  ------                        --------------  -----         \n",
            " 0   type                          52354 non-null  object        \n",
            " 1   status                        52354 non-null  object        \n",
            " 2   departure.iataCode            52354 non-null  object        \n",
            " 3   departure.icaoCode            52354 non-null  object        \n",
            " 4   departure.terminal            32293 non-null  object        \n",
            " 5   departure.delay               52354 non-null  float64       \n",
            " 6   departure.scheduledTime       52354 non-null  datetime64[ns]\n",
            " 7   departure.estimatedTime       50878 non-null  object        \n",
            " 8   departure.actualTime          41485 non-null  object        \n",
            " 9   departure.estimatedRunway     41485 non-null  object        \n",
            " 10  departure.actualRunway        41485 non-null  object        \n",
            " 11  arrival.iataCode              52354 non-null  object        \n",
            " 12  arrival.icaoCode              52354 non-null  object        \n",
            " 13  arrival.scheduledTime         52354 non-null  object        \n",
            " 14  arrival.estimatedTime         40439 non-null  object        \n",
            " 15  airline.name                  52354 non-null  object        \n",
            " 16  airline.iataCode              52354 non-null  object        \n",
            " 17  airline.icaoCode              52354 non-null  object        \n",
            " 18  flight.number                 52354 non-null  object        \n",
            " 19  flight.iataNumber             52354 non-null  object        \n",
            " 20  flight.icaoNumber             52354 non-null  object        \n",
            " 21  codeshared.airline.name       17515 non-null  object        \n",
            " 22  codeshared.airline.iataCode   17515 non-null  object        \n",
            " 23  codeshared.airline.icaoCode   17515 non-null  object        \n",
            " 24  codeshared.flight.number      17515 non-null  object        \n",
            " 25  codeshared.flight.iataNumber  17515 non-null  object        \n",
            " 26  codeshared.flight.icaoNumber  17515 non-null  object        \n",
            " 27  arrival.baggage               20238 non-null  object        \n",
            " 28  arrival.terminal              22549 non-null  object        \n",
            " 29  departure_delay_bin           52354 non-null  category      \n",
            " 30  departure_year                52354 non-null  int32         \n",
            " 31  departure_month               52354 non-null  int32         \n",
            " 32  departure_day                 52354 non-null  int32         \n",
            " 33  scheduled_d_Time              52354 non-null  object        \n",
            "dtypes: category(1), datetime64[ns](1), float64(1), int32(3), object(28)\n",
            "memory usage: 12.6+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "all_data.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 412
        },
        "id": "YnTfBlYjR3SO",
        "outputId": "e04da85a-1a32-45ff-ddad-a4046474f1d1",
        "collapsed": true
      },
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        type  status departure.iataCode departure.icaoCode departure.terminal  \\\n",
              "0  departure  active                lhe               opla                  m   \n",
              "1  departure  active                lhe               opla                  m   \n",
              "2  departure  active                lhe               opla                  m   \n",
              "3  departure  active                lhe               opla                  m   \n",
              "4  departure  active                lhe               opla                  m   \n",
              "5  departure  active                lhe               opla               main   \n",
              "6  departure  active                lhe               opla               main   \n",
              "7  departure  active                lhe               opla                  m   \n",
              "8  departure  active                lhe               opla                  m   \n",
              "9  departure  active                lhe               opla                NaN   \n",
              "\n",
              "   departure.delay departure.scheduledTime departure.estimatedTime  \\\n",
              "0             20.0     2023-12-16 06:35:00                  064500   \n",
              "1             20.0     2023-12-16 06:35:00                  064500   \n",
              "2             44.0     2023-12-16 09:00:00                  093000   \n",
              "3            360.0     2023-12-16 11:00:00                  170000   \n",
              "4             60.0     2023-12-16 11:25:00                  122500   \n",
              "5             30.0     2023-12-16 12:20:00                  125000   \n",
              "6             30.0     2023-12-16 12:20:00                  125000   \n",
              "7             10.0     2023-12-16 13:00:00                  130000   \n",
              "8              3.0     2023-12-16 15:00:00                  150000   \n",
              "9              2.0     2023-12-16 15:05:00                  150500   \n",
              "\n",
              "  departure.actualTime departure.estimatedRunway  ...  \\\n",
              "0               065500   2023-12-16t06:55:00.000  ...   \n",
              "1               065500   2023-12-16t06:55:00.000  ...   \n",
              "2               094300   2023-12-16t09:43:00.000  ...   \n",
              "3                  NaN                       NaN  ...   \n",
              "4                  NaN                       NaN  ...   \n",
              "5                  NaN                       NaN  ...   \n",
              "6                  NaN                       NaN  ...   \n",
              "7               131000   2023-12-16t13:10:00.000  ...   \n",
              "8               150300   2023-12-16t15:03:00.000  ...   \n",
              "9               150700   2023-12-16t15:07:00.000  ...   \n",
              "\n",
              "  codeshared.flight.number codeshared.flight.iataNumber  \\\n",
              "0                      715                        tk715   \n",
              "1                      NaN                          NaN   \n",
              "2                      NaN                          NaN   \n",
              "3                      NaN                          NaN   \n",
              "4                      NaN                          NaN   \n",
              "5                      625                        ek625   \n",
              "6                      NaN                          NaN   \n",
              "7                      NaN                          NaN   \n",
              "8                      NaN                          NaN   \n",
              "9                      NaN                          NaN   \n",
              "\n",
              "  codeshared.flight.icaoNumber arrival.baggage arrival.terminal  \\\n",
              "0                       thy715             NaN              NaN   \n",
              "1                          NaN             NaN              NaN   \n",
              "2                          NaN             NaN                m   \n",
              "3                          NaN             NaN                m   \n",
              "4                          NaN              01                1   \n",
              "5                       uae625              03                3   \n",
              "6                          NaN              03                3   \n",
              "7                          NaN              05                1   \n",
              "8                          NaN             NaN              NaN   \n",
              "9                          NaN             NaN              NaN   \n",
              "\n",
              "  departure_delay_bin departure_year departure_month departure_day  \\\n",
              "0   (-0.949, 244.625]           2023              12            16   \n",
              "1   (-0.949, 244.625]           2023              12            16   \n",
              "2   (-0.949, 244.625]           2023              12            16   \n",
              "3   (244.625, 488.25]           2023              12            16   \n",
              "4   (-0.949, 244.625]           2023              12            16   \n",
              "5   (-0.949, 244.625]           2023              12            16   \n",
              "6   (-0.949, 244.625]           2023              12            16   \n",
              "7   (-0.949, 244.625]           2023              12            16   \n",
              "8   (-0.949, 244.625]           2023              12            16   \n",
              "9   (-0.949, 244.625]           2023              12            16   \n",
              "\n",
              "  scheduled_d_Time  \n",
              "0           063500  \n",
              "1           063500  \n",
              "2           090000  \n",
              "3           110000  \n",
              "4           112500  \n",
              "5           122000  \n",
              "6           122000  \n",
              "7           130000  \n",
              "8           150000  \n",
              "9           150500  \n",
              "\n",
              "[10 rows x 34 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c2c39840-0714-47e0-b31d-546f3affa355\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>type</th>\n",
              "      <th>status</th>\n",
              "      <th>departure.iataCode</th>\n",
              "      <th>departure.icaoCode</th>\n",
              "      <th>departure.terminal</th>\n",
              "      <th>departure.delay</th>\n",
              "      <th>departure.scheduledTime</th>\n",
              "      <th>departure.estimatedTime</th>\n",
              "      <th>departure.actualTime</th>\n",
              "      <th>departure.estimatedRunway</th>\n",
              "      <th>...</th>\n",
              "      <th>codeshared.flight.number</th>\n",
              "      <th>codeshared.flight.iataNumber</th>\n",
              "      <th>codeshared.flight.icaoNumber</th>\n",
              "      <th>arrival.baggage</th>\n",
              "      <th>arrival.terminal</th>\n",
              "      <th>departure_delay_bin</th>\n",
              "      <th>departure_year</th>\n",
              "      <th>departure_month</th>\n",
              "      <th>departure_day</th>\n",
              "      <th>scheduled_d_Time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>departure</td>\n",
              "      <td>active</td>\n",
              "      <td>lhe</td>\n",
              "      <td>opla</td>\n",
              "      <td>m</td>\n",
              "      <td>20.0</td>\n",
              "      <td>2023-12-16 06:35:00</td>\n",
              "      <td>064500</td>\n",
              "      <td>065500</td>\n",
              "      <td>2023-12-16t06:55:00.000</td>\n",
              "      <td>...</td>\n",
              "      <td>715</td>\n",
              "      <td>tk715</td>\n",
              "      <td>thy715</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>(-0.949, 244.625]</td>\n",
              "      <td>2023</td>\n",
              "      <td>12</td>\n",
              "      <td>16</td>\n",
              "      <td>063500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>departure</td>\n",
              "      <td>active</td>\n",
              "      <td>lhe</td>\n",
              "      <td>opla</td>\n",
              "      <td>m</td>\n",
              "      <td>20.0</td>\n",
              "      <td>2023-12-16 06:35:00</td>\n",
              "      <td>064500</td>\n",
              "      <td>065500</td>\n",
              "      <td>2023-12-16t06:55:00.000</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>(-0.949, 244.625]</td>\n",
              "      <td>2023</td>\n",
              "      <td>12</td>\n",
              "      <td>16</td>\n",
              "      <td>063500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>departure</td>\n",
              "      <td>active</td>\n",
              "      <td>lhe</td>\n",
              "      <td>opla</td>\n",
              "      <td>m</td>\n",
              "      <td>44.0</td>\n",
              "      <td>2023-12-16 09:00:00</td>\n",
              "      <td>093000</td>\n",
              "      <td>094300</td>\n",
              "      <td>2023-12-16t09:43:00.000</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>m</td>\n",
              "      <td>(-0.949, 244.625]</td>\n",
              "      <td>2023</td>\n",
              "      <td>12</td>\n",
              "      <td>16</td>\n",
              "      <td>090000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>departure</td>\n",
              "      <td>active</td>\n",
              "      <td>lhe</td>\n",
              "      <td>opla</td>\n",
              "      <td>m</td>\n",
              "      <td>360.0</td>\n",
              "      <td>2023-12-16 11:00:00</td>\n",
              "      <td>170000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>m</td>\n",
              "      <td>(244.625, 488.25]</td>\n",
              "      <td>2023</td>\n",
              "      <td>12</td>\n",
              "      <td>16</td>\n",
              "      <td>110000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>departure</td>\n",
              "      <td>active</td>\n",
              "      <td>lhe</td>\n",
              "      <td>opla</td>\n",
              "      <td>m</td>\n",
              "      <td>60.0</td>\n",
              "      <td>2023-12-16 11:25:00</td>\n",
              "      <td>122500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>01</td>\n",
              "      <td>1</td>\n",
              "      <td>(-0.949, 244.625]</td>\n",
              "      <td>2023</td>\n",
              "      <td>12</td>\n",
              "      <td>16</td>\n",
              "      <td>112500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>departure</td>\n",
              "      <td>active</td>\n",
              "      <td>lhe</td>\n",
              "      <td>opla</td>\n",
              "      <td>main</td>\n",
              "      <td>30.0</td>\n",
              "      <td>2023-12-16 12:20:00</td>\n",
              "      <td>125000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>625</td>\n",
              "      <td>ek625</td>\n",
              "      <td>uae625</td>\n",
              "      <td>03</td>\n",
              "      <td>3</td>\n",
              "      <td>(-0.949, 244.625]</td>\n",
              "      <td>2023</td>\n",
              "      <td>12</td>\n",
              "      <td>16</td>\n",
              "      <td>122000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>departure</td>\n",
              "      <td>active</td>\n",
              "      <td>lhe</td>\n",
              "      <td>opla</td>\n",
              "      <td>main</td>\n",
              "      <td>30.0</td>\n",
              "      <td>2023-12-16 12:20:00</td>\n",
              "      <td>125000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>03</td>\n",
              "      <td>3</td>\n",
              "      <td>(-0.949, 244.625]</td>\n",
              "      <td>2023</td>\n",
              "      <td>12</td>\n",
              "      <td>16</td>\n",
              "      <td>122000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>departure</td>\n",
              "      <td>active</td>\n",
              "      <td>lhe</td>\n",
              "      <td>opla</td>\n",
              "      <td>m</td>\n",
              "      <td>10.0</td>\n",
              "      <td>2023-12-16 13:00:00</td>\n",
              "      <td>130000</td>\n",
              "      <td>131000</td>\n",
              "      <td>2023-12-16t13:10:00.000</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>05</td>\n",
              "      <td>1</td>\n",
              "      <td>(-0.949, 244.625]</td>\n",
              "      <td>2023</td>\n",
              "      <td>12</td>\n",
              "      <td>16</td>\n",
              "      <td>130000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>departure</td>\n",
              "      <td>active</td>\n",
              "      <td>lhe</td>\n",
              "      <td>opla</td>\n",
              "      <td>m</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2023-12-16 15:00:00</td>\n",
              "      <td>150000</td>\n",
              "      <td>150300</td>\n",
              "      <td>2023-12-16t15:03:00.000</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>(-0.949, 244.625]</td>\n",
              "      <td>2023</td>\n",
              "      <td>12</td>\n",
              "      <td>16</td>\n",
              "      <td>150000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>departure</td>\n",
              "      <td>active</td>\n",
              "      <td>lhe</td>\n",
              "      <td>opla</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2023-12-16 15:05:00</td>\n",
              "      <td>150500</td>\n",
              "      <td>150700</td>\n",
              "      <td>2023-12-16t15:07:00.000</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>(-0.949, 244.625]</td>\n",
              "      <td>2023</td>\n",
              "      <td>12</td>\n",
              "      <td>16</td>\n",
              "      <td>150500</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10 rows × 34 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c2c39840-0714-47e0-b31d-546f3affa355')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c2c39840-0714-47e0-b31d-546f3affa355 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c2c39840-0714-47e0-b31d-546f3affa355');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9f7511ee-166c-404a-a9f4-35660d79ec6a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9f7511ee-166c-404a-a9f4-35660d79ec6a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9f7511ee-166c-404a-a9f4-35660d79ec6a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "all_data"
            }
          },
          "metadata": {},
          "execution_count": 79
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "all_data.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "evXhwRQ0N8t9",
        "outputId": "cb4911d4-ab43-4ef3-ac89-fa57ebc86846",
        "collapsed": true
      },
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       departure.delay        departure.scheduledTime  departure_year  \\\n",
              "count     52354.000000                          52354    52354.000000   \n",
              "mean         33.804466  2024-01-11 19:29:15.777591296     2023.522367   \n",
              "min           1.000000            2023-07-13 05:05:00     2023.000000   \n",
              "25%           9.000000            2023-10-11 16:31:15     2023.000000   \n",
              "50%          16.000000            2024-01-08 16:10:00     2024.000000   \n",
              "75%          29.000000            2024-04-14 20:58:45     2024.000000   \n",
              "max        1950.000000            2024-07-10 04:55:00     2024.000000   \n",
              "std          73.390865                            NaN        0.499504   \n",
              "\n",
              "       departure_month  departure_day  \n",
              "count     52354.000000   52354.000000  \n",
              "mean          6.599018      15.823184  \n",
              "min           1.000000       1.000000  \n",
              "25%           4.000000       8.000000  \n",
              "50%           7.000000      16.000000  \n",
              "75%          10.000000      24.000000  \n",
              "max          12.000000      31.000000  \n",
              "std           3.449401       8.865619  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-260e1902-ff0e-4b07-9016-b850e1d3c8ce\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>departure.delay</th>\n",
              "      <th>departure.scheduledTime</th>\n",
              "      <th>departure_year</th>\n",
              "      <th>departure_month</th>\n",
              "      <th>departure_day</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>52354.000000</td>\n",
              "      <td>52354</td>\n",
              "      <td>52354.000000</td>\n",
              "      <td>52354.000000</td>\n",
              "      <td>52354.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>33.804466</td>\n",
              "      <td>2024-01-11 19:29:15.777591296</td>\n",
              "      <td>2023.522367</td>\n",
              "      <td>6.599018</td>\n",
              "      <td>15.823184</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>2023-07-13 05:05:00</td>\n",
              "      <td>2023.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>9.000000</td>\n",
              "      <td>2023-10-11 16:31:15</td>\n",
              "      <td>2023.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>8.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>16.000000</td>\n",
              "      <td>2024-01-08 16:10:00</td>\n",
              "      <td>2024.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>16.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>29.000000</td>\n",
              "      <td>2024-04-14 20:58:45</td>\n",
              "      <td>2024.000000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>24.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1950.000000</td>\n",
              "      <td>2024-07-10 04:55:00</td>\n",
              "      <td>2024.000000</td>\n",
              "      <td>12.000000</td>\n",
              "      <td>31.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>73.390865</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.499504</td>\n",
              "      <td>3.449401</td>\n",
              "      <td>8.865619</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-260e1902-ff0e-4b07-9016-b850e1d3c8ce')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-260e1902-ff0e-4b07-9016-b850e1d3c8ce button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-260e1902-ff0e-4b07-9016-b850e1d3c8ce');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1063444d-a8a4-4f03-b2a4-dbbd559a953e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1063444d-a8a4-4f03-b2a4-dbbd559a953e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1063444d-a8a4-4f03-b2a4-dbbd559a953e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"all_data\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"departure.delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18415.56298248844,\n        \"min\": 1.0,\n        \"max\": 52354.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          33.80446575237804,\n          29.0,\n          52354.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"departure.scheduledTime\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1970-01-01 00:00:00.000052354\",\n        \"max\": \"2024-07-10 04:55:00\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"52354\",\n          \"2024-01-11 19:29:15.777591296\",\n          \"2024-04-14 20:58:45\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"departure_year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17910.665778355884,\n        \"min\": 0.4995042388903745,\n        \"max\": 52354.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2023.5223669633647,\n          0.4995042388903745,\n          2023.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"departure_month\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18507.709770635975,\n        \"min\": 1.0,\n        \"max\": 52354.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6.599018222103373,\n          10.0,\n          52354.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"departure_day\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18504.649026261435,\n        \"min\": 1.0,\n        \"max\": 52354.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          15.823184474920732,\n          24.0,\n          52354.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 80
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "selected_columns = [\n",
        "    'departure.iataCode',\n",
        "    'departure_year',\n",
        "    'departure_month',\n",
        "    'departure_day',\n",
        "    'scheduled_d_Time',\n",
        "    'departure.estimatedTime',\n",
        "    'arrival.iataCode',\n",
        "    'arrival.scheduledTime',\n",
        "    'airline.name',\n",
        "    'flight.number',\n",
        "    'departure_delay_bin'\n",
        "\n",
        "]\n",
        "\n",
        "# Keep only the selected columns in the DataFrame\n",
        "all_data = all_data[selected_columns]\n"
      ],
      "metadata": {
        "id": "kwG6jkvkObCk"
      },
      "execution_count": 81,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "all_data.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0Ecoffeb_aLS",
        "outputId": "8dcdc4c1-49a4-49a9-cfe1-9f5147ab9ae2"
      },
      "execution_count": 82,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 52354 entries, 0 to 52353\n",
            "Data columns (total 11 columns):\n",
            " #   Column                   Non-Null Count  Dtype   \n",
            "---  ------                   --------------  -----   \n",
            " 0   departure.iataCode       52354 non-null  object  \n",
            " 1   departure_year           52354 non-null  int32   \n",
            " 2   departure_month          52354 non-null  int32   \n",
            " 3   departure_day            52354 non-null  int32   \n",
            " 4   scheduled_d_Time         52354 non-null  object  \n",
            " 5   departure.estimatedTime  50878 non-null  object  \n",
            " 6   arrival.iataCode         52354 non-null  object  \n",
            " 7   arrival.scheduledTime    52354 non-null  object  \n",
            " 8   airline.name             52354 non-null  object  \n",
            " 9   flight.number            52354 non-null  object  \n",
            " 10  departure_delay_bin      52354 non-null  category\n",
            "dtypes: category(1), int32(3), object(7)\n",
            "memory usage: 3.4+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "all_data.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "id": "XGCUDNsMVAn_",
        "outputId": "98dacb6b-dde7-4b04-d82a-dcf07938262f"
      },
      "execution_count": 83,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  departure.iataCode  departure_year  departure_month  departure_day  \\\n",
              "0                lhe            2023               12             16   \n",
              "1                lhe            2023               12             16   \n",
              "2                lhe            2023               12             16   \n",
              "3                lhe            2023               12             16   \n",
              "4                lhe            2023               12             16   \n",
              "5                lhe            2023               12             16   \n",
              "6                lhe            2023               12             16   \n",
              "7                lhe            2023               12             16   \n",
              "8                lhe            2023               12             16   \n",
              "9                lhe            2023               12             16   \n",
              "\n",
              "  scheduled_d_Time departure.estimatedTime arrival.iataCode  \\\n",
              "0           063500                  064500              ist   \n",
              "1           063500                  064500              ist   \n",
              "2           090000                  093000              khi   \n",
              "3           110000                  170000              khi   \n",
              "4           112500                  122500              dxb   \n",
              "5           122000                  125000              dxb   \n",
              "6           122000                  125000              dxb   \n",
              "7           130000                  130000              dxb   \n",
              "8           150000                  150000              mct   \n",
              "9           150500                  150500              khi   \n",
              "\n",
              "  arrival.scheduledTime                     airline.name flight.number  \\\n",
              "0                113500  pakistan international airlines          5715   \n",
              "1                113500                 turkish airlines           715   \n",
              "2                110000                          airblue           401   \n",
              "3                184500  pakistan international airlines           303   \n",
              "4                140000                       serene air           723   \n",
              "5                145000                       air canada          7579   \n",
              "6                145000                         emirates           625   \n",
              "7                155500                          airblue           410   \n",
              "8                171500                         oman air           344   \n",
              "9                165500                        flyjinnah           843   \n",
              "\n",
              "  departure_delay_bin  \n",
              "0   (-0.949, 244.625]  \n",
              "1   (-0.949, 244.625]  \n",
              "2   (-0.949, 244.625]  \n",
              "3   (244.625, 488.25]  \n",
              "4   (-0.949, 244.625]  \n",
              "5   (-0.949, 244.625]  \n",
              "6   (-0.949, 244.625]  \n",
              "7   (-0.949, 244.625]  \n",
              "8   (-0.949, 244.625]  \n",
              "9   (-0.949, 244.625]  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1b4bbd4f-c444-4f18-8e31-195cc7c0d742\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>departure.iataCode</th>\n",
              "      <th>departure_year</th>\n",
              "      <th>departure_month</th>\n",
              "      <th>departure_day</th>\n",
              "      <th>scheduled_d_Time</th>\n",
              "      <th>departure.estimatedTime</th>\n",
              "      <th>arrival.iataCode</th>\n",
              "      <th>arrival.scheduledTime</th>\n",
              "      <th>airline.name</th>\n",
              "      <th>flight.number</th>\n",
              "      <th>departure_delay_bin</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>lhe</td>\n",
              "      <td>2023</td>\n",
              "      <td>12</td>\n",
              "      <td>16</td>\n",
              "      <td>063500</td>\n",
              "      <td>064500</td>\n",
              "      <td>ist</td>\n",
              "      <td>113500</td>\n",
              "      <td>pakistan international airlines</td>\n",
              "      <td>5715</td>\n",
              "      <td>(-0.949, 244.625]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>lhe</td>\n",
              "      <td>2023</td>\n",
              "      <td>12</td>\n",
              "      <td>16</td>\n",
              "      <td>063500</td>\n",
              "      <td>064500</td>\n",
              "      <td>ist</td>\n",
              "      <td>113500</td>\n",
              "      <td>turkish airlines</td>\n",
              "      <td>715</td>\n",
              "      <td>(-0.949, 244.625]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>lhe</td>\n",
              "      <td>2023</td>\n",
              "      <td>12</td>\n",
              "      <td>16</td>\n",
              "      <td>090000</td>\n",
              "      <td>093000</td>\n",
              "      <td>khi</td>\n",
              "      <td>110000</td>\n",
              "      <td>airblue</td>\n",
              "      <td>401</td>\n",
              "      <td>(-0.949, 244.625]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>lhe</td>\n",
              "      <td>2023</td>\n",
              "      <td>12</td>\n",
              "      <td>16</td>\n",
              "      <td>110000</td>\n",
              "      <td>170000</td>\n",
              "      <td>khi</td>\n",
              "      <td>184500</td>\n",
              "      <td>pakistan international airlines</td>\n",
              "      <td>303</td>\n",
              "      <td>(244.625, 488.25]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>lhe</td>\n",
              "      <td>2023</td>\n",
              "      <td>12</td>\n",
              "      <td>16</td>\n",
              "      <td>112500</td>\n",
              "      <td>122500</td>\n",
              "      <td>dxb</td>\n",
              "      <td>140000</td>\n",
              "      <td>serene air</td>\n",
              "      <td>723</td>\n",
              "      <td>(-0.949, 244.625]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>lhe</td>\n",
              "      <td>2023</td>\n",
              "      <td>12</td>\n",
              "      <td>16</td>\n",
              "      <td>122000</td>\n",
              "      <td>125000</td>\n",
              "      <td>dxb</td>\n",
              "      <td>145000</td>\n",
              "      <td>air canada</td>\n",
              "      <td>7579</td>\n",
              "      <td>(-0.949, 244.625]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>lhe</td>\n",
              "      <td>2023</td>\n",
              "      <td>12</td>\n",
              "      <td>16</td>\n",
              "      <td>122000</td>\n",
              "      <td>125000</td>\n",
              "      <td>dxb</td>\n",
              "      <td>145000</td>\n",
              "      <td>emirates</td>\n",
              "      <td>625</td>\n",
              "      <td>(-0.949, 244.625]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>lhe</td>\n",
              "      <td>2023</td>\n",
              "      <td>12</td>\n",
              "      <td>16</td>\n",
              "      <td>130000</td>\n",
              "      <td>130000</td>\n",
              "      <td>dxb</td>\n",
              "      <td>155500</td>\n",
              "      <td>airblue</td>\n",
              "      <td>410</td>\n",
              "      <td>(-0.949, 244.625]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>lhe</td>\n",
              "      <td>2023</td>\n",
              "      <td>12</td>\n",
              "      <td>16</td>\n",
              "      <td>150000</td>\n",
              "      <td>150000</td>\n",
              "      <td>mct</td>\n",
              "      <td>171500</td>\n",
              "      <td>oman air</td>\n",
              "      <td>344</td>\n",
              "      <td>(-0.949, 244.625]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>lhe</td>\n",
              "      <td>2023</td>\n",
              "      <td>12</td>\n",
              "      <td>16</td>\n",
              "      <td>150500</td>\n",
              "      <td>150500</td>\n",
              "      <td>khi</td>\n",
              "      <td>165500</td>\n",
              "      <td>flyjinnah</td>\n",
              "      <td>843</td>\n",
              "      <td>(-0.949, 244.625]</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1b4bbd4f-c444-4f18-8e31-195cc7c0d742')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1b4bbd4f-c444-4f18-8e31-195cc7c0d742 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1b4bbd4f-c444-4f18-8e31-195cc7c0d742');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4c8c8143-d58c-475f-8570-97ca9d668df1\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4c8c8143-d58c-475f-8570-97ca9d668df1')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4c8c8143-d58c-475f-8570-97ca9d668df1 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "all_data",
              "summary": "{\n  \"name\": \"all_data\",\n  \"rows\": 52354,\n  \"fields\": [\n    {\n      \"column\": \"departure.iataCode\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"lhe\",\n          \"khi\",\n          \"isb\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"departure_year\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2024,\n          2023\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"departure_month\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          10,\n          9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"departure_day\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 31,\n        \"samples\": [\n          12,\n          31\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"scheduled_d_Time\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 389,\n        \"samples\": [\n          \"033500\",\n          \"213000\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"departure.estimatedTime\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1274,\n        \"samples\": [\n          \"172600\",\n          \"103600\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"arrival.iataCode\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 86,\n        \"samples\": [\n          \"tzx\",\n          \"ist\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"arrival.scheduledTime\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 516,\n        \"samples\": [\n          \"202500\",\n          \"211800\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"airline.name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 88,\n        \"samples\": [\n          \"smartlynx airlines\",\n          \"pakistan international airlines\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"flight.number\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 625,\n        \"samples\": [\n          \"6372\",\n          \"178\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"departure_delay_bin\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"(-0.949, 244.625]\",\n          \"(244.625, 488.25]\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 83
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "all_data=all_data.drop_duplicates()\n"
      ],
      "metadata": {
        "id": "CLALO3MOP5mj"
      },
      "execution_count": 84,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class MultiClassSVM:\n",
        "    def __init__(self, C=1.0, kernel='linear', degree=3, gamma='scale'):\n",
        "        self.C = C\n",
        "        self.kernel = kernel\n",
        "        self.degree = degree\n",
        "        self.gamma = gamma\n",
        "        self.svm_models = []\n",
        "\n",
        "    def fit(self, X, y):\n",
        "        unique_classes = np.unique(y)\n",
        "        for cls in unique_classes:\n",
        "            # Create a binary label for current class vs all others\n",
        "            binary_y = np.where(y == cls, 1, -1)\n",
        "            svm = MultiKernelSVM(C=self.C, kernel=self.kernel, degree=self.degree, gamma=self.gamma)\n",
        "            svm.fit(X, binary_y)\n",
        "            self.svm_models.append(svm)\n",
        "\n",
        "    def predict(self, X):\n",
        "        # Get predictions for each binary classifier\n",
        "        predictions = np.array([svm.predict(X) for svm in self.svm_models])\n",
        "        # Choose the class with the highest decision function value\n",
        "        return np.argmax(predictions, axis=0)\n"
      ],
      "metadata": {
        "id": "KbzXYqFpAUkt"
      },
      "execution_count": 85,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class MultiKernelSVM:\n",
        "    def __init__(self, C=1.0, kernel='linear', degree=3, gamma='scale'):\n",
        "        self.C = C\n",
        "        self.kernel = kernel\n",
        "        self.degree = degree\n",
        "        self.gamma = gamma\n",
        "        self.alphas = None\n",
        "        self.b = None\n",
        "        self.support_vectors = None\n",
        "        self.y_support = None\n",
        "\n",
        "    def _kernel(self, X, Y):\n",
        "        if self.kernel == 'linear':\n",
        "            return np.dot(X, Y.T)\n",
        "        elif self.kernel == 'polynomial':\n",
        "            return (np.dot(X, Y.T) + 1) ** self.degree\n",
        "        elif self.kernel == 'rbf':\n",
        "            if self.gamma == 'scale':\n",
        "                self.gamma = 1.0 / X.shape[1]\n",
        "            elif self.gamma == 'auto':\n",
        "                self.gamma = 1.0 / X.shape[0]\n",
        "            sq_dists = np.sum(X**2, 1).reshape(-1, 1) + np.sum(Y**2, 1) - 2 * np.dot(X, Y.T)\n",
        "            return np.exp(-self.gamma * sq_dists)\n",
        "        else:\n",
        "            raise ValueError(\"Unsupported kernel\")\n",
        "\n",
        "    def fit(self, X, y, num_iter=100):\n",
        "        num_samples, num_features = X.shape\n",
        "        K = self._kernel(X, X)\n",
        "\n",
        "        self.alphas = np.zeros(num_samples)\n",
        "        self.b = 0\n",
        "\n",
        "        for _ in range(num_iter):\n",
        "            for i in range(num_samples):\n",
        "                condition = y[i] * (np.dot(self.alphas * y, K[i]) + self.b)\n",
        "                if condition < 1:\n",
        "                    self.alphas[i] += self.C * (1 - condition)\n",
        "                    self.b += self.C * y[i]\n",
        "\n",
        "        self.support_vectors = X\n",
        "        self.y_support = y\n",
        "\n",
        "    def predict(self, X):\n",
        "        K = self._kernel(X, self.support_vectors)\n",
        "        predictions = np.dot(K, self.alphas * self.y_support) + self.b\n",
        "        return np.sign(predictions)\n"
      ],
      "metadata": {
        "id": "dH6qMFhWc2aP"
      },
      "execution_count": 86,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class DecisionTreeNode:\n",
        "    def __init__(self, feature=None, threshold=None, left=None, right=None, value=None):\n",
        "        self.feature = feature\n",
        "        self.threshold = threshold\n",
        "        self.left = left\n",
        "        self.right = right\n",
        "        self.value = value\n",
        "\n",
        "class DecisionTree:\n",
        "    def __init__(self, max_depth=10):\n",
        "        self.max_depth = max_depth\n",
        "\n",
        "    def fit(self, X, y):\n",
        "        self.tree = self._fit(X, y, depth=0)\n",
        "\n",
        "    def _fit(self, X, y, depth):\n",
        "        if len(set(y)) == 1:\n",
        "            return DecisionTreeNode(value=np.bincount(y).argmax())\n",
        "        if depth >= self.max_depth:\n",
        "            return DecisionTreeNode(value=np.bincount(y).argmax())\n",
        "\n",
        "        best_feature, best_threshold = self._find_best_split(X, y)\n",
        "        if best_feature is None:\n",
        "            return DecisionTreeNode(value=np.bincount(y).argmax())\n",
        "\n",
        "        left_indices = X[:, best_feature] <= best_threshold\n",
        "        right_indices = X[:, best_feature] > best_threshold\n",
        "\n",
        "        left_node = self._fit(X[left_indices], y[left_indices], depth + 1)\n",
        "        right_node = self._fit(X[right_indices], y[right_indices], depth + 1)\n",
        "\n",
        "        return DecisionTreeNode(feature=best_feature, threshold=best_threshold, left=left_node, right=right_node)\n",
        "\n",
        "    def _find_best_split(self, X, y):\n",
        "        best_feature, best_threshold = None, None\n",
        "        best_gain = -1\n",
        "\n",
        "        num_features = X.shape[1]\n",
        "        for feature in range(num_features):\n",
        "            thresholds = np.unique(X[:, feature])\n",
        "            for threshold in thresholds:\n",
        "                gain = self._information_gain(X, y, feature, threshold)\n",
        "                if gain > best_gain:\n",
        "                    best_gain = gain\n",
        "                    best_feature = feature\n",
        "                    best_threshold = threshold\n",
        "\n",
        "        return best_feature, best_threshold\n",
        "\n",
        "    def _information_gain(self, X, y, feature, threshold):\n",
        "        left_indices = X[:, feature] <= threshold\n",
        "        right_indices = X[:, feature] > threshold\n",
        "\n",
        "        left_y, right_y = y[left_indices], y[right_indices]\n",
        "        p_left = len(left_y) / len(y)\n",
        "        p_right = len(right_y) / len(y)\n",
        "\n",
        "        entropy_before = self._entropy(y)\n",
        "        entropy_after = (p_left * self._entropy(left_y)) + (p_right * self._entropy(right_y))\n",
        "\n",
        "        return entropy_before - entropy_after\n",
        "\n",
        "    def _entropy(self, y):\n",
        "        proportions = np.bincount(y) / len(y)\n",
        "        return -np.sum(proportions * np.log2(proportions + 1e-10))  # Added epsilon to avoid log(0)\n",
        "\n",
        "    def predict(self, X):\n",
        "        return np.array([self._predict(x, self.tree) for x in X])\n",
        "\n",
        "    def _predict(self, x, node):\n",
        "        if node.value is not None:\n",
        "            return node.value\n",
        "        if x[node.feature] <= node.threshold:\n",
        "            return self._predict(x, node.left)\n",
        "        else:\n",
        "            return self._predict(x, node.right)\n"
      ],
      "metadata": {
        "id": "ebU1abtLZwhX"
      },
      "execution_count": 87,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "class LogisticRegression:\n",
        "    def __init__(self, learning_rate=0.01, num_iterations=1000):\n",
        "        self.learning_rate = learning_rate\n",
        "        self.num_iterations = num_iterations\n",
        "\n",
        "    def softmax(self, z):\n",
        "        exp_z = np.exp(z - np.max(z, axis=1, keepdims=True))\n",
        "        return exp_z / np.sum(exp_z, axis=1, keepdims=True)\n",
        "\n",
        "    def fit(self, X, y):\n",
        "        # Find the unique classes and map them to consecutive integers\n",
        "        unique_classes = np.unique(y)\n",
        "        self.class_mapping = {c: i for i, c in enumerate(unique_classes)}\n",
        "\n",
        "        # Map the original y values to the new consecutive integer classes\n",
        "        y = np.array([self.class_mapping[c] for c in y])\n",
        "\n",
        "        self.num_classes = len(unique_classes)  # Ensure this reflects the number of unique classes\n",
        "        self.theta = np.zeros((X.shape[1], self.num_classes))\n",
        "\n",
        "        for _ in range(self.num_iterations):\n",
        "            predictions = self.softmax(np.dot(X, self.theta))\n",
        "            y_one_hot = np.eye(self.num_classes)[y]\n",
        "            error = y_one_hot - predictions\n",
        "            gradient = np.dot(X.T, error) / len(y)\n",
        "            self.theta += self.learning_rate * gradient\n",
        "\n",
        "    def predict(self, X):\n",
        "        predictions = self.softmax(np.dot(X, self.theta))\n",
        "        # Reverse the class mapping to get original class labels\n",
        "        predicted_classes = np.argmax(predictions, axis=1)\n",
        "        return np.array([list(self.class_mapping.keys())[list(self.class_mapping.values()).index(c)] for c in predicted_classes])"
      ],
      "metadata": {
        "id": "eMN_6RskZyfm"
      },
      "execution_count": 88,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(all_data.info())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KUFx7jlYo38g",
        "outputId": "ca80460a-eb32-41f2-e111-83c90cec1e3d"
      },
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 52354 entries, 0 to 52353\n",
            "Data columns (total 11 columns):\n",
            " #   Column                   Non-Null Count  Dtype   \n",
            "---  ------                   --------------  -----   \n",
            " 0   departure.iataCode       52354 non-null  object  \n",
            " 1   departure_year           52354 non-null  int32   \n",
            " 2   departure_month          52354 non-null  int32   \n",
            " 3   departure_day            52354 non-null  int32   \n",
            " 4   scheduled_d_Time         52354 non-null  object  \n",
            " 5   departure.estimatedTime  50878 non-null  object  \n",
            " 6   arrival.iataCode         52354 non-null  object  \n",
            " 7   arrival.scheduledTime    52354 non-null  object  \n",
            " 8   airline.name             52354 non-null  object  \n",
            " 9   flight.number            52354 non-null  object  \n",
            " 10  departure_delay_bin      52354 non-null  category\n",
            "dtypes: category(1), int32(3), object(7)\n",
            "memory usage: 3.4+ MB\n",
            "None\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "def preprocess_data(all_data):\n",
        "    # Convert categorical columns to numeric codes\n",
        "    categorical_columns = ['departure.iataCode', 'arrival.iataCode', 'airline.name']\n",
        "    for col in categorical_columns:\n",
        "        all_data[col] = all_data[col].astype('category').cat.codes\n",
        "\n",
        "    # Convert time strings to minutes past midnight\n",
        "    def convert_to_minutes(time_value):\n",
        "        if isinstance(time_value, str):\n",
        "            try:\n",
        "                return int(time_value[:2]) * 60 + int(time_value[2:4])\n",
        "            except ValueError:\n",
        "                return np.nan\n",
        "        elif isinstance(time_value, int):\n",
        "            # Convert integer time format to string format\n",
        "            time_str = f\"{time_value:06d}\"\n",
        "            return int(time_str[:2]) * 60 + int(time_str[2:4])\n",
        "        return np.nan\n",
        "\n",
        "    time_columns = ['scheduled_d_Time', 'departure.estimatedTime', 'arrival.scheduledTime']\n",
        "    for col in time_columns:\n",
        "        all_data[col] = all_data[col].apply(convert_to_minutes)\n",
        "\n",
        "    # Handle missing values\n",
        "    for col in time_columns:\n",
        "        all_data[col].fillna(all_data[col].median(), inplace=True)\n",
        "\n",
        "    # Convert target variable to numerical\n",
        "    all_data['departure_delay_bin'] = all_data['departure_delay_bin'].astype('category').cat.codes\n",
        "\n",
        "    # Drop irrelevant columns\n",
        "    X = all_data.drop(['departure_delay_bin', 'flight.number'], axis=1).values\n",
        "    y = all_data['departure_delay_bin'].values\n",
        "\n",
        "    return X, y\n",
        "# Apply preprocessing\n",
        "X, y = preprocess_data(all_data)\n"
      ],
      "metadata": {
        "id": "GRPi7fcXkxIN"
      },
      "execution_count": 90,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from collections import Counter\n",
        "\n",
        "class BaggingEnsemble:\n",
        "    def __init__(self, models):\n",
        "        \"\"\"\n",
        "        Initialize the Bagging ensemble with a list of base models.\n",
        "        \"\"\"\n",
        "        self.models = models  # A list of models like [logistic_model, tree_model, svm_model]\n",
        "\n",
        "    def fit(self, X, y):\n",
        "        \"\"\"\n",
        "        Fit each model to the data.\n",
        "        \"\"\"\n",
        "        for model in self.models:\n",
        "            model.fit(X, y)\n",
        "\n",
        "    def predict(self, X):\n",
        "        \"\"\"\n",
        "        Predict using the majority vote from all models.\n",
        "        \"\"\"\n",
        "        predictions = np.array([model.predict(X) for model in self.models])  # Collect predictions from each model\n",
        "        # For each sample, determine the majority vote (most common prediction)\n",
        "        final_predictions = np.array([Counter(pred).most_common(1)[0][0] for pred in predictions.T])\n",
        "        return final_predictions\n"
      ],
      "metadata": {
        "id": "uC0BvXip2HP_"
      },
      "execution_count": 91,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class BoostingEnsemble:\n",
        "    def __init__(self, models, num_iterations=10):\n",
        "        \"\"\"\n",
        "        Initialize the Boosting ensemble with a list of models and iterations.\n",
        "        \"\"\"\n",
        "        self.models = models  # List of base learners\n",
        "        self.num_iterations = num_iterations\n",
        "        self.alphas = []  # Store the model weights (alphas)\n",
        "\n",
        "    def fit(self, X, y):\n",
        "        \"\"\"\n",
        "        Fit the ensemble using boosting.\n",
        "        \"\"\"\n",
        "        num_samples = len(y)\n",
        "        # Initialize sample weights equally\n",
        "        weights = np.ones(num_samples) / num_samples\n",
        "\n",
        "        for model in self.models:\n",
        "            model.fit(X, y)\n",
        "            y_pred = model.predict(X)\n",
        "\n",
        "            # Compute misclassification rate (error)\n",
        "            error = np.sum(weights * (y_pred != y)) / np.sum(weights)\n",
        "\n",
        "            # Compute the model's weight (alpha) based on error\n",
        "            alpha = np.log((1 - error) / (error + 1e-10))  # Avoid divide by zero\n",
        "            self.alphas.append(alpha)\n",
        "\n",
        "            # Update the sample weights\n",
        "            weights *= np.exp(alpha * (y_pred != y))  # Increase weights of misclassified examples\n",
        "            weights /= np.sum(weights)  # Normalize the weights\n",
        "\n",
        "    def predict(self, X):\n",
        "        \"\"\"\n",
        "        Predict using a weighted majority vote.\n",
        "        \"\"\"\n",
        "        predictions = np.zeros(X.shape[0])\n",
        "\n",
        "        for alpha, model in zip(self.alphas, self.models):\n",
        "            predictions += alpha * model.predict(X)  # Weighted prediction\n",
        "\n",
        "        # Return the sign of the aggregated prediction\n",
        "        return np.sign(predictions)"
      ],
      "metadata": {
        "id": "VdLXH1hlEZoi"
      },
      "execution_count": 92,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import f1_score\n",
        "from sklearn.model_selection import KFold\n",
        "\n",
        "def cross_validate(model, X, y, num_folds=5):\n",
        "    kf = KFold(n_splits=num_folds, shuffle=True, random_state=42)\n",
        "    accuracy_scores = []\n",
        "    f1_scores = []\n",
        "\n",
        "    for train_index, test_index in kf.split(X):\n",
        "        X_train, X_test = X[train_index], X[test_index]\n",
        "        y_train, y_test = y[train_index], y[test_index]\n",
        "\n",
        "        model.fit(X_train, y_train)\n",
        "        y_pred = model.predict(X_test)\n",
        "\n",
        "        accuracy = np.mean(y_pred == y_test)\n",
        "        f1 = f1_score(y_test, y_pred, average='weighted')  # F1 score (weighted for multi-class)\n",
        "\n",
        "        accuracy_scores.append(accuracy)\n",
        "        f1_scores.append(f1)\n",
        "\n",
        "    print(f\"Average accuracy: {np.mean(accuracy_scores):.4f}\")\n",
        "    print(f\"Average F1-score: {np.mean(f1_scores):.4f}\")\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "cof9T-Ty2LA-"
      },
      "execution_count": 93,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Example usage with your models:\n",
        "logistic_model = LogisticRegression(learning_rate=0.01, num_iterations=1000)\n",
        "tree_model = DecisionTree(max_depth=10)\n",
        "svm_model = MultiClassSVM(kernel='rbf', C=1.0, gamma=0.1)\n",
        "\n",
        "# Perform cross-validation on each model\n",
        "cross_validate(logistic_model, X, y, num_folds=5)\n",
        "cross_validate(tree_model, X, y, num_folds=5)\n",
        "cross_validate(svm_model, X, y, num_folds=5)"
      ],
      "metadata": {
        "id": "2-Sj69S3XGFA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create instances of your models\n",
        "logistic_model = LogisticRegression(learning_rate=0.01, num_iterations=1000)\n",
        "tree_model = DecisionTree(max_depth=10)\n",
        "svm_model = MultiKernelSVM(kernel='rbf', C=1.0, gamma=0.1)\n",
        "\n",
        "# Bagging ensemble\n",
        "bagging_ensemble = BaggingEnsemble([logistic_model, tree_model])\n",
        "#bagging_ensemble = BaggingEnsemble([logistic_model, tree_model, svm_model])\n",
        "cross_validate(bagging_ensemble, X, y, num_folds=5)\n",
        "\n",
        "# Boosting ensemble\n",
        "boosting_ensemble = BoostingEnsemble([logistic_model, tree_model], num_iterations=10)\n",
        "#boosting_ensemble = BoostingEnsemble([logistic_model, tree_model, svm_model],, num_iterations=10)\n",
        "\n",
        "cross_validate(boosting_ensemble, X, y, num_folds=5)"
      ],
      "metadata": {
        "id": "mTBRgZ5KEbx9"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}